from typing import overload, Any, Callable, TypeVar, Union
from typing import Tuple, List, Sequence, MutableSequence

Callback = Union[Callable[..., None], None]
Buffer = TypeVar('Buffer')
Pointer = TypeVar('Pointer')
Template = TypeVar('Template')

import vtkmodules.vtkCommonCore

class vtkThreadedImageWriter(vtkmodules.vtkCommonCore.vtkObject):
    def EncodeAndWrite(self, image:'vtkImageData', fileName:str) -> None: ...
    def Finalize(self) -> None: ...
    def GetMaxThreads(self) -> int: ...
    def GetNumberOfGenerationsFromBase(self, type:str) -> int: ...
    @staticmethod
    def GetNumberOfGenerationsFromBaseType(type:str) -> int: ...
    def Initialize(self) -> None: ...
    def IsA(self, type:str) -> int: ...
    @staticmethod
    def IsTypeOf(type:str) -> int: ...
    def NewInstance(self) -> 'vtkThreadedImageWriter': ...
    @staticmethod
    def SafeDownCast(o:'vtkObjectBase') -> 'vtkThreadedImageWriter': ...
    def SetMaxThreads(self, __a:int) -> None: ...

