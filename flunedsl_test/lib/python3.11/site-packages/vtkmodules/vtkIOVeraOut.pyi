from typing import overload, Any, Callable, TypeVar, Union
from typing import Tuple, List, Sequence, MutableSequence

Callback = Union[Callable[..., None], None]
Buffer = TypeVar('Buffer')
Pointer = TypeVar('Pointer')
Template = TypeVar('Template')

import vtkmodules.vtkCommonCore
import vtkmodules.vtkCommonExecutionModel

class vtkVeraOutReader(vtkmodules.vtkCommonExecutionModel.vtkRectilinearGridAlgorithm):
    def GetCellDataArraySelection(self) -> 'vtkDataArraySelection': ...
    def GetFieldDataArraySelection(self) -> 'vtkDataArraySelection': ...
    def GetFileName(self) -> str: ...
    def GetMTime(self) -> int: ...
    def GetNumberOfGenerationsFromBase(self, type:str) -> int: ...
    @staticmethod
    def GetNumberOfGenerationsFromBaseType(type:str) -> int: ...
    def IsA(self, type:str) -> int: ...
    @staticmethod
    def IsTypeOf(type:str) -> int: ...
    def NewInstance(self) -> 'vtkVeraOutReader': ...
    @staticmethod
    def SafeDownCast(o:'vtkObjectBase') -> 'vtkVeraOutReader': ...
    def SetFileName(self, _arg:str) -> None: ...

